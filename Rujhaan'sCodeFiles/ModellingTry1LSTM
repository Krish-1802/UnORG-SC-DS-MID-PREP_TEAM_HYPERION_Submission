{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11402349,"sourceType":"datasetVersion","datasetId":7141798},{"sourceId":11424360,"sourceType":"datasetVersion","datasetId":7154869}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import OneHotEncoder\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom sklearn.model_selection import train_test_split\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-17T13:40:40.659529Z","iopub.execute_input":"2025-04-17T13:40:40.659844Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/customer-behavior-dataset/Customer_Behavior_Data.csv\n/kaggle/input/ps-dataset/order_data_last_six_month.xlsx - Worksheet.csv\n/kaggle/input/ps-dataset/associated_order_item_data_last_six_month.xlsx - Worksheet.csv\n","output_type":"stream"},{"name":"stderr","text":"2025-04-17 13:40:42.463477: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1744897242.700377      31 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1744897242.769691      31 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"def piechart(series):\n    \"\"\"\n    Automatically plots a pie chart from a Pandas Series.\n    - Uses the series name as the chart title.\n    - Displays value counts as percentages.\n    \"\"\"\n    if not isinstance(series, pd.Series):\n        raise TypeError(\"Input must be a pandas Series\")\n\n    counts = series.value_counts(dropna=False)\n    labels = counts.index.astype(str)\n    \n    # Auto-title using series name or fallback\n    title = series.name if series.name else \"Pie Chart\"\n\n    # Plot\n    plt.figure(figsize=(6, 6))\n    plt.pie(counts, labels=labels, autopct='%1.1f%%', startangle=90, counterclock=False)\n    plt.title(title)\n    plt.axis('equal')  # Equal aspect ratio ensures the pie is circular\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T13:30:31.591922Z","iopub.execute_input":"2025-04-17T13:30:31.592839Z","iopub.status.idle":"2025-04-17T13:30:31.599764Z","shell.execute_reply.started":"2025-04-17T13:30:31.592803Z","shell.execute_reply":"2025-04-17T13:30:31.598846Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"beh_data=pd.read_csv(\"/kaggle/input/customer-behavior-dataset/Customer_Behavior_Data.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T13:17:52.279505Z","iopub.execute_input":"2025-04-17T13:17:52.279869Z","iopub.status.idle":"2025-04-17T13:17:52.313611Z","shell.execute_reply.started":"2025-04-17T13:17:52.279848Z","shell.execute_reply":"2025-04-17T13:17:52.312619Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"zero_people=beh_data[beh_data['Total Orders']<=4]['customer_id']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T13:17:52.314468Z","iopub.execute_input":"2025-04-17T13:17:52.314717Z","iopub.status.idle":"2025-04-17T13:17:52.328570Z","shell.execute_reply.started":"2025-04-17T13:17:52.314696Z","shell.execute_reply":"2025-04-17T13:17:52.327587Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"cluster_1_people=beh_data[((beh_data['Total Orders']<=25) & (beh_data['Total Orders']>4) & (beh_data['Average Order Gap Days']>=14))]['customer_id']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T13:17:52.525116Z","iopub.execute_input":"2025-04-17T13:17:52.525750Z","iopub.status.idle":"2025-04-17T13:17:52.532286Z","shell.execute_reply.started":"2025-04-17T13:17:52.525720Z","shell.execute_reply":"2025-04-17T13:17:52.531475Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"cluster_2_people = beh_data['customer_id'][~beh_data['customer_id'].isin(cluster_1_people) & ~beh_data['customer_id'].isin(zero_people)]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T13:17:52.720611Z","iopub.execute_input":"2025-04-17T13:17:52.720981Z","iopub.status.idle":"2025-04-17T13:17:52.732119Z","shell.execute_reply.started":"2025-04-17T13:17:52.720949Z","shell.execute_reply":"2025-04-17T13:17:52.731173Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"dataset=pd.read_csv(\"/kaggle/input/ps-dataset/order_data_last_six_month.xlsx - Worksheet.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T13:22:39.383756Z","iopub.execute_input":"2025-04-17T13:22:39.384047Z","iopub.status.idle":"2025-04-17T13:22:39.592273Z","shell.execute_reply.started":"2025-04-17T13:22:39.384025Z","shell.execute_reply":"2025-04-17T13:22:39.591335Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"train_data=dataset[dataset['customer_id'].isin(cluster_2_people)]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T13:22:39.593714Z","iopub.execute_input":"2025-04-17T13:22:39.594003Z","iopub.status.idle":"2025-04-17T13:22:39.603381Z","shell.execute_reply.started":"2025-04-17T13:22:39.593981Z","shell.execute_reply":"2025-04-17T13:22:39.602658Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"train_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T13:22:39.625067Z","iopub.execute_input":"2025-04-17T13:22:39.625391Z","iopub.status.idle":"2025-04-17T13:22:39.639929Z","shell.execute_reply.started":"2025-04-17T13:22:39.625365Z","shell.execute_reply":"2025-04-17T13:22:39.639036Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"   order_date  order_id     order_number  customer_id  \\\n0  03/04/2025    136349  SO/25-26/000818         5235   \n1  30/01/2025    110393   SO/24-25/90881         7622   \n3  26/12/2024     96182   SO/24-25/77411         2223   \n4  30/12/2024     97858   SO/24-25/78975         6903   \n5  04/01/2025     99588   SO/24-25/80618         2296   \n\n                    customer_name       poc_name  poc_id    amount  discount  \\\n0  Anshu General Store Sector 34     Vikas Gupta       6  19125.00   1650.00   \n1                  bhai di rasoi   Abhay Srimali    7814   9670.48    735.48   \n3       Bikaner Sweets ( Harola )      Swatantra      25   4520.00    420.00   \n4            Lucknow kirana store      Raj Kumar    7039   1700.00      0.00   \n5            Champaran Meat House     Ajay Singh      38   5074.00    214.00   \n\n   net_order_amount  profit order_status warehouse_name  warehouse_id  \n0           17475.0     0.0       CLOSED          Noida             3  \n1            8935.0   -56.4       CLOSED  Greater NOIDA             6  \n3            4100.0    40.0       CLOSED          Noida             3  \n4            1700.0   -88.0       CLOSED    Gomti Nagar             1  \n5            4860.0    10.0       CLOSED       Telibagh             2  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>order_date</th>\n      <th>order_id</th>\n      <th>order_number</th>\n      <th>customer_id</th>\n      <th>customer_name</th>\n      <th>poc_name</th>\n      <th>poc_id</th>\n      <th>amount</th>\n      <th>discount</th>\n      <th>net_order_amount</th>\n      <th>profit</th>\n      <th>order_status</th>\n      <th>warehouse_name</th>\n      <th>warehouse_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>03/04/2025</td>\n      <td>136349</td>\n      <td>SO/25-26/000818</td>\n      <td>5235</td>\n      <td>Anshu General Store Sector 34</td>\n      <td>Vikas Gupta</td>\n      <td>6</td>\n      <td>19125.00</td>\n      <td>1650.00</td>\n      <td>17475.0</td>\n      <td>0.0</td>\n      <td>CLOSED</td>\n      <td>Noida</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>30/01/2025</td>\n      <td>110393</td>\n      <td>SO/24-25/90881</td>\n      <td>7622</td>\n      <td>bhai di rasoi</td>\n      <td>Abhay Srimali</td>\n      <td>7814</td>\n      <td>9670.48</td>\n      <td>735.48</td>\n      <td>8935.0</td>\n      <td>-56.4</td>\n      <td>CLOSED</td>\n      <td>Greater NOIDA</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>26/12/2024</td>\n      <td>96182</td>\n      <td>SO/24-25/77411</td>\n      <td>2223</td>\n      <td>Bikaner Sweets ( Harola )</td>\n      <td>Swatantra</td>\n      <td>25</td>\n      <td>4520.00</td>\n      <td>420.00</td>\n      <td>4100.0</td>\n      <td>40.0</td>\n      <td>CLOSED</td>\n      <td>Noida</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>30/12/2024</td>\n      <td>97858</td>\n      <td>SO/24-25/78975</td>\n      <td>6903</td>\n      <td>Lucknow kirana store</td>\n      <td>Raj Kumar</td>\n      <td>7039</td>\n      <td>1700.00</td>\n      <td>0.00</td>\n      <td>1700.0</td>\n      <td>-88.0</td>\n      <td>CLOSED</td>\n      <td>Gomti Nagar</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>04/01/2025</td>\n      <td>99588</td>\n      <td>SO/24-25/80618</td>\n      <td>2296</td>\n      <td>Champaran Meat House</td>\n      <td>Ajay Singh</td>\n      <td>38</td>\n      <td>5074.00</td>\n      <td>214.00</td>\n      <td>4860.0</td>\n      <td>10.0</td>\n      <td>CLOSED</td>\n      <td>Telibagh</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"train_data.drop(['order_number','customer_name','poc_name','poc_id','amount','profit','order_status','warehouse_id'],axis=1,inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T13:22:40.720731Z","iopub.execute_input":"2025-04-17T13:22:40.721028Z","iopub.status.idle":"2025-04-17T13:22:40.727870Z","shell.execute_reply.started":"2025-04-17T13:22:40.721005Z","shell.execute_reply":"2025-04-17T13:22:40.726967Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_31/404819675.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  train_data.drop(['order_number','customer_name','poc_name','poc_id','amount','profit','order_status','warehouse_id'],axis=1,inplace=True)\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"import pandas as pd\n\n# assume train_data is your original DataFrame\ndf = train_data.copy()\ndf['order_date'] = pd.to_datetime(df['order_date'], dayfirst=True)\n\n# group & aggregate:\ndaily_df = df.groupby(['customer_id','order_date']).agg(\n    daily_order_count = ('order_id',       'count'),\n    discount          = ('discount',       'sum'),\n    net_order_amount  = ('net_order_amount','sum'),\n    warehouse_name    = ('warehouse_name', 'first')  # or use mode if you prefer\n).reset_index()\n\n# now daily_df has exactly one row per customer per date\ndaily_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T13:25:04.591350Z","iopub.execute_input":"2025-04-17T13:25:04.591649Z","iopub.status.idle":"2025-04-17T13:25:04.644369Z","shell.execute_reply.started":"2025-04-17T13:25:04.591627Z","shell.execute_reply":"2025-04-17T13:25:04.643232Z"}},"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"       customer_id order_date  daily_order_count  discount  net_order_amount  \\\n0                1 2024-10-01                  1      0.00            4710.0   \n1                1 2024-10-06                  1    120.00            2220.0   \n2                1 2024-10-07                  1    150.00           12900.0   \n3                1 2024-10-09                  1    200.00            3210.0   \n4                1 2024-10-10                  1    273.76            5580.0   \n...            ...        ...                ...       ...               ...   \n50025         9158 2025-04-03                  1    540.00            6300.0   \n50026         9158 2025-04-07                  1    530.00            6450.0   \n50027         9158 2025-04-08                  1    481.00            5890.0   \n50028         9158 2025-04-09                  1    721.00            8650.0   \n50029         9158 2025-04-10                  1    710.00            8630.0   \n\n      warehouse_name  \n0           Telibagh  \n1           Telibagh  \n2           Telibagh  \n3           Telibagh  \n4           Telibagh  \n...              ...  \n50025  Greater NOIDA  \n50026  Greater NOIDA  \n50027  Greater NOIDA  \n50028  Greater NOIDA  \n50029  Greater NOIDA  \n\n[50030 rows x 6 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>customer_id</th>\n      <th>order_date</th>\n      <th>daily_order_count</th>\n      <th>discount</th>\n      <th>net_order_amount</th>\n      <th>warehouse_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2024-10-01</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>4710.0</td>\n      <td>Telibagh</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2024-10-06</td>\n      <td>1</td>\n      <td>120.00</td>\n      <td>2220.0</td>\n      <td>Telibagh</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>2024-10-07</td>\n      <td>1</td>\n      <td>150.00</td>\n      <td>12900.0</td>\n      <td>Telibagh</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>2024-10-09</td>\n      <td>1</td>\n      <td>200.00</td>\n      <td>3210.0</td>\n      <td>Telibagh</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>2024-10-10</td>\n      <td>1</td>\n      <td>273.76</td>\n      <td>5580.0</td>\n      <td>Telibagh</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>50025</th>\n      <td>9158</td>\n      <td>2025-04-03</td>\n      <td>1</td>\n      <td>540.00</td>\n      <td>6300.0</td>\n      <td>Greater NOIDA</td>\n    </tr>\n    <tr>\n      <th>50026</th>\n      <td>9158</td>\n      <td>2025-04-07</td>\n      <td>1</td>\n      <td>530.00</td>\n      <td>6450.0</td>\n      <td>Greater NOIDA</td>\n    </tr>\n    <tr>\n      <th>50027</th>\n      <td>9158</td>\n      <td>2025-04-08</td>\n      <td>1</td>\n      <td>481.00</td>\n      <td>5890.0</td>\n      <td>Greater NOIDA</td>\n    </tr>\n    <tr>\n      <th>50028</th>\n      <td>9158</td>\n      <td>2025-04-09</td>\n      <td>1</td>\n      <td>721.00</td>\n      <td>8650.0</td>\n      <td>Greater NOIDA</td>\n    </tr>\n    <tr>\n      <th>50029</th>\n      <td>9158</td>\n      <td>2025-04-10</td>\n      <td>1</td>\n      <td>710.00</td>\n      <td>8630.0</td>\n      <td>Greater NOIDA</td>\n    </tr>\n  </tbody>\n</table>\n<p>50030 rows × 6 columns</p>\n</div>"},"metadata":{}}],"execution_count":30},{"cell_type":"code","source":"import numpy as np\nfrom tqdm import tqdm\n\nSEQ_LEN     = 30\nPRED_WINDOW = 14\nfeature_cols = ['order_placed','discount','net_order_amount'] + dow_cols + wh_cols\n\nX, y = [], []\n\nfor cust_id, grp in tqdm(daily_df.groupby('customer_id'), total=daily_df['customer_id'].nunique()):\n    grp = grp.sort_values('date').reset_index(drop=True)\n    n   = len(grp)\n    \n    # slide window\n    for start in range(0, n - SEQ_LEN - PRED_WINDOW + 1):\n        hist = grp.iloc[start : start + SEQ_LEN][feature_cols].values              # (30, F)\n        fut  = grp.iloc[start + SEQ_LEN : start + SEQ_LEN + PRED_WINDOW]['order_placed'].values  # (14,)\n        \n        X.append(hist)\n        y.append(fut)  # keep the full 14‑length array\n\nX = np.array(X)  # → (num_samples, 30, num_features)\ny = np.array(y)  # → (num_samples, 14)\n\nprint(\"X shape:\", X.shape)\nprint(\"y shape:\", y.shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T13:33:16.869354Z","iopub.execute_input":"2025-04-17T13:33:16.869663Z","iopub.status.idle":"2025-04-17T13:36:15.756103Z","shell.execute_reply.started":"2025-04-17T13:33:16.869639Z","shell.execute_reply":"2025-04-17T13:36:15.755172Z"}},"outputs":[{"name":"stderr","text":"100%|██████████| 1932/1932 [02:54<00:00, 11.05it/s]\n","output_type":"stream"},{"name":"stdout","text":"X shape: (289800, 30, 16)\ny shape: (289800, 14)\n","output_type":"stream"}],"execution_count":43},{"cell_type":"code","source":"X_train,X_test,Y_train,Y_test=train_test_split(X,y,test_size=0.4,random_state=42)\nX_cv,X_test,Y_cv,Y_test=train_test_split(X_test,Y_test,test_size=0.5,random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T13:40:05.210927Z","iopub.execute_input":"2025-04-17T13:40:05.211243Z","iopub.status.idle":"2025-04-17T13:40:08.867429Z","shell.execute_reply.started":"2025-04-17T13:40:05.211219Z","shell.execute_reply":"2025-04-17T13:40:08.866514Z"}},"outputs":[],"execution_count":52},{"cell_type":"code","source":"model = Sequential([\n    # 1st LSTM layer, returns sequences so we can stack another LSTM\n    LSTM(128, input_shape=(SEQ_LEN, NUM_FEATURES), return_sequences=True),\n    Dropout(0.2),\n\n    # 2nd LSTM layer\n    LSTM(64, return_sequences=False),\n    Dropout(0.2),\n\n    # Dense “bottleneck” to learn combined features\n    Dense(32, activation='relu'),\n    Dropout(0.1),\n\n    # Final output: 14 sigmoid neurons, one per future day\n    Dense(PRED_HORIZON, activation='sigmoid')\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T13:38:10.047872Z","iopub.execute_input":"2025-04-17T13:38:10.048324Z","iopub.status.idle":"2025-04-17T13:38:10.066510Z","shell.execute_reply.started":"2025-04-17T13:38:10.048284Z","shell.execute_reply":"2025-04-17T13:38:10.064802Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/2828791622.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m model = Sequential([\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0;31m# 1st LSTM layer, returns sequences so we can stack another LSTM\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mLSTM\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_shape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mSEQ_LEN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNUM_FEATURES\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_sequences\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mDropout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'Sequential' is not defined"],"ename":"NameError","evalue":"name 'Sequential' is not defined","output_type":"error"}],"execution_count":50},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}