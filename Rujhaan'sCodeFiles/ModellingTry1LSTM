{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":11402349,"sourceType":"datasetVersion","datasetId":7141798},{"sourceId":11424360,"sourceType":"datasetVersion","datasetId":7154869}],"dockerImageVersionId":31011,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import accuracy_score,recall_score,f1_score,precision_score\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom sklearn.model_selection import train_test_split\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:00:34.258972Z","iopub.execute_input":"2025-04-17T14:00:34.259580Z","iopub.status.idle":"2025-04-17T14:00:34.266475Z","shell.execute_reply.started":"2025-04-17T14:00:34.259539Z","shell.execute_reply":"2025-04-17T14:00:34.265889Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/ps-dataset/order_data_last_six_month.xlsx - Worksheet.csv\n/kaggle/input/ps-dataset/associated_order_item_data_last_six_month.xlsx - Worksheet.csv\n/kaggle/input/customer-behavior-dataset/Customer_Behavior_Data.csv\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"def piechart(series):\n    \"\"\"\n    Automatically plots a pie chart from a Pandas Series.\n    - Uses the series name as the chart title.\n    - Displays value counts as percentages.\n    \"\"\"\n    if not isinstance(series, pd.Series):\n        raise TypeError(\"Input must be a pandas Series\")\n\n    counts = series.value_counts(dropna=False)\n    labels = counts.index.astype(str)\n    \n    # Auto-title using series name or fallback\n    title = series.name if series.name else \"Pie Chart\"\n\n    # Plot\n    plt.figure(figsize=(6, 6))\n    plt.pie(counts, labels=labels, autopct='%1.1f%%', startangle=90, counterclock=False)\n    plt.title(title)\n    plt.axis('equal')  # Equal aspect ratio ensures the pie is circular\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:00:34.271705Z","iopub.execute_input":"2025-04-17T14:00:34.272402Z","iopub.status.idle":"2025-04-17T14:00:34.289073Z","shell.execute_reply.started":"2025-04-17T14:00:34.272379Z","shell.execute_reply":"2025-04-17T14:00:34.288344Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"beh_data=pd.read_csv(\"/kaggle/input/customer-behavior-dataset/Customer_Behavior_Data.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:00:34.290310Z","iopub.execute_input":"2025-04-17T14:00:34.290633Z","iopub.status.idle":"2025-04-17T14:00:34.320910Z","shell.execute_reply.started":"2025-04-17T14:00:34.290616Z","shell.execute_reply":"2025-04-17T14:00:34.319969Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"zero_people=beh_data[beh_data['Total Orders']<=4]['customer_id']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:00:34.321653Z","iopub.execute_input":"2025-04-17T14:00:34.321872Z","iopub.status.idle":"2025-04-17T14:00:34.327022Z","shell.execute_reply.started":"2025-04-17T14:00:34.321856Z","shell.execute_reply":"2025-04-17T14:00:34.326428Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"cluster_1_people=beh_data[((beh_data['Total Orders']<=25) & (beh_data['Total Orders']>4) & (beh_data['Average Order Gap Days']>=14))]['customer_id']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:00:34.328455Z","iopub.execute_input":"2025-04-17T14:00:34.329314Z","iopub.status.idle":"2025-04-17T14:00:34.346917Z","shell.execute_reply.started":"2025-04-17T14:00:34.329253Z","shell.execute_reply":"2025-04-17T14:00:34.346316Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"cluster_2_people = beh_data['customer_id'][~beh_data['customer_id'].isin(cluster_1_people) & ~beh_data['customer_id'].isin(zero_people)]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:00:34.347608Z","iopub.execute_input":"2025-04-17T14:00:34.347784Z","iopub.status.idle":"2025-04-17T14:00:34.366009Z","shell.execute_reply.started":"2025-04-17T14:00:34.347770Z","shell.execute_reply":"2025-04-17T14:00:34.365221Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"dataset=pd.read_csv(\"/kaggle/input/ps-dataset/order_data_last_six_month.xlsx - Worksheet.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:00:34.366831Z","iopub.execute_input":"2025-04-17T14:00:34.367049Z","iopub.status.idle":"2025-04-17T14:00:34.544016Z","shell.execute_reply.started":"2025-04-17T14:00:34.367033Z","shell.execute_reply":"2025-04-17T14:00:34.543463Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"train_data=dataset[dataset['customer_id'].isin(cluster_2_people)]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:00:34.546073Z","iopub.execute_input":"2025-04-17T14:00:34.546311Z","iopub.status.idle":"2025-04-17T14:00:34.554895Z","shell.execute_reply.started":"2025-04-17T14:00:34.546287Z","shell.execute_reply":"2025-04-17T14:00:34.554031Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"train_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:00:34.555620Z","iopub.execute_input":"2025-04-17T14:00:34.555909Z","iopub.status.idle":"2025-04-17T14:00:34.577308Z","shell.execute_reply.started":"2025-04-17T14:00:34.555882Z","shell.execute_reply":"2025-04-17T14:00:34.576460Z"}},"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"   order_date  order_id     order_number  customer_id  \\\n0  03/04/2025    136349  SO/25-26/000818         5235   \n1  30/01/2025    110393   SO/24-25/90881         7622   \n3  26/12/2024     96182   SO/24-25/77411         2223   \n4  30/12/2024     97858   SO/24-25/78975         6903   \n5  04/01/2025     99588   SO/24-25/80618         2296   \n\n                    customer_name       poc_name  poc_id    amount  discount  \\\n0  Anshu General Store Sector 34     Vikas Gupta       6  19125.00   1650.00   \n1                  bhai di rasoi   Abhay Srimali    7814   9670.48    735.48   \n3       Bikaner Sweets ( Harola )      Swatantra      25   4520.00    420.00   \n4            Lucknow kirana store      Raj Kumar    7039   1700.00      0.00   \n5            Champaran Meat House     Ajay Singh      38   5074.00    214.00   \n\n   net_order_amount  profit order_status warehouse_name  warehouse_id  \n0           17475.0     0.0       CLOSED          Noida             3  \n1            8935.0   -56.4       CLOSED  Greater NOIDA             6  \n3            4100.0    40.0       CLOSED          Noida             3  \n4            1700.0   -88.0       CLOSED    Gomti Nagar             1  \n5            4860.0    10.0       CLOSED       Telibagh             2  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>order_date</th>\n      <th>order_id</th>\n      <th>order_number</th>\n      <th>customer_id</th>\n      <th>customer_name</th>\n      <th>poc_name</th>\n      <th>poc_id</th>\n      <th>amount</th>\n      <th>discount</th>\n      <th>net_order_amount</th>\n      <th>profit</th>\n      <th>order_status</th>\n      <th>warehouse_name</th>\n      <th>warehouse_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>03/04/2025</td>\n      <td>136349</td>\n      <td>SO/25-26/000818</td>\n      <td>5235</td>\n      <td>Anshu General Store Sector 34</td>\n      <td>Vikas Gupta</td>\n      <td>6</td>\n      <td>19125.00</td>\n      <td>1650.00</td>\n      <td>17475.0</td>\n      <td>0.0</td>\n      <td>CLOSED</td>\n      <td>Noida</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>30/01/2025</td>\n      <td>110393</td>\n      <td>SO/24-25/90881</td>\n      <td>7622</td>\n      <td>bhai di rasoi</td>\n      <td>Abhay Srimali</td>\n      <td>7814</td>\n      <td>9670.48</td>\n      <td>735.48</td>\n      <td>8935.0</td>\n      <td>-56.4</td>\n      <td>CLOSED</td>\n      <td>Greater NOIDA</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>26/12/2024</td>\n      <td>96182</td>\n      <td>SO/24-25/77411</td>\n      <td>2223</td>\n      <td>Bikaner Sweets ( Harola )</td>\n      <td>Swatantra</td>\n      <td>25</td>\n      <td>4520.00</td>\n      <td>420.00</td>\n      <td>4100.0</td>\n      <td>40.0</td>\n      <td>CLOSED</td>\n      <td>Noida</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>30/12/2024</td>\n      <td>97858</td>\n      <td>SO/24-25/78975</td>\n      <td>6903</td>\n      <td>Lucknow kirana store</td>\n      <td>Raj Kumar</td>\n      <td>7039</td>\n      <td>1700.00</td>\n      <td>0.00</td>\n      <td>1700.0</td>\n      <td>-88.0</td>\n      <td>CLOSED</td>\n      <td>Gomti Nagar</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>04/01/2025</td>\n      <td>99588</td>\n      <td>SO/24-25/80618</td>\n      <td>2296</td>\n      <td>Champaran Meat House</td>\n      <td>Ajay Singh</td>\n      <td>38</td>\n      <td>5074.00</td>\n      <td>214.00</td>\n      <td>4860.0</td>\n      <td>10.0</td>\n      <td>CLOSED</td>\n      <td>Telibagh</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":24},{"cell_type":"code","source":"train_data.drop(['order_number','customer_name','poc_name','poc_id','amount','profit','order_status','warehouse_id'],axis=1,inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:00:34.578115Z","iopub.execute_input":"2025-04-17T14:00:34.578362Z","iopub.status.idle":"2025-04-17T14:00:34.593203Z","shell.execute_reply.started":"2025-04-17T14:00:34.578336Z","shell.execute_reply":"2025-04-17T14:00:34.592560Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_31/404819675.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  train_data.drop(['order_number','customer_name','poc_name','poc_id','amount','profit','order_status','warehouse_id'],axis=1,inplace=True)\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"import pandas as pd\n\n# assume train_data is your original DataFrame\ndf = train_data.copy()\ndf['order_date'] = pd.to_datetime(df['order_date'], dayfirst=True)\n\n# group & aggregate:\ndaily_df = df.groupby(['customer_id','order_date']).agg(\n    daily_order_count = ('order_id',       'count'),\n    discount          = ('discount',       'sum'),\n    net_order_amount  = ('net_order_amount','sum'),\n    warehouse_name    = ('warehouse_name', 'first')  # or use mode if you prefer\n).reset_index()\n\n# now daily_df has exactly one row per customer per date\ndaily_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:00:34.593979Z","iopub.execute_input":"2025-04-17T14:00:34.594765Z","iopub.status.idle":"2025-04-17T14:00:34.647917Z","shell.execute_reply.started":"2025-04-17T14:00:34.594742Z","shell.execute_reply":"2025-04-17T14:00:34.647263Z"}},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"       customer_id order_date  daily_order_count  discount  net_order_amount  \\\n0                1 2024-10-01                  1      0.00            4710.0   \n1                1 2024-10-06                  1    120.00            2220.0   \n2                1 2024-10-07                  1    150.00           12900.0   \n3                1 2024-10-09                  1    200.00            3210.0   \n4                1 2024-10-10                  1    273.76            5580.0   \n...            ...        ...                ...       ...               ...   \n50025         9158 2025-04-03                  1    540.00            6300.0   \n50026         9158 2025-04-07                  1    530.00            6450.0   \n50027         9158 2025-04-08                  1    481.00            5890.0   \n50028         9158 2025-04-09                  1    721.00            8650.0   \n50029         9158 2025-04-10                  1    710.00            8630.0   \n\n      warehouse_name  \n0           Telibagh  \n1           Telibagh  \n2           Telibagh  \n3           Telibagh  \n4           Telibagh  \n...              ...  \n50025  Greater NOIDA  \n50026  Greater NOIDA  \n50027  Greater NOIDA  \n50028  Greater NOIDA  \n50029  Greater NOIDA  \n\n[50030 rows x 6 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>customer_id</th>\n      <th>order_date</th>\n      <th>daily_order_count</th>\n      <th>discount</th>\n      <th>net_order_amount</th>\n      <th>warehouse_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2024-10-01</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>4710.0</td>\n      <td>Telibagh</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2024-10-06</td>\n      <td>1</td>\n      <td>120.00</td>\n      <td>2220.0</td>\n      <td>Telibagh</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>2024-10-07</td>\n      <td>1</td>\n      <td>150.00</td>\n      <td>12900.0</td>\n      <td>Telibagh</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>2024-10-09</td>\n      <td>1</td>\n      <td>200.00</td>\n      <td>3210.0</td>\n      <td>Telibagh</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>2024-10-10</td>\n      <td>1</td>\n      <td>273.76</td>\n      <td>5580.0</td>\n      <td>Telibagh</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>50025</th>\n      <td>9158</td>\n      <td>2025-04-03</td>\n      <td>1</td>\n      <td>540.00</td>\n      <td>6300.0</td>\n      <td>Greater NOIDA</td>\n    </tr>\n    <tr>\n      <th>50026</th>\n      <td>9158</td>\n      <td>2025-04-07</td>\n      <td>1</td>\n      <td>530.00</td>\n      <td>6450.0</td>\n      <td>Greater NOIDA</td>\n    </tr>\n    <tr>\n      <th>50027</th>\n      <td>9158</td>\n      <td>2025-04-08</td>\n      <td>1</td>\n      <td>481.00</td>\n      <td>5890.0</td>\n      <td>Greater NOIDA</td>\n    </tr>\n    <tr>\n      <th>50028</th>\n      <td>9158</td>\n      <td>2025-04-09</td>\n      <td>1</td>\n      <td>721.00</td>\n      <td>8650.0</td>\n      <td>Greater NOIDA</td>\n    </tr>\n    <tr>\n      <th>50029</th>\n      <td>9158</td>\n      <td>2025-04-10</td>\n      <td>1</td>\n      <td>710.00</td>\n      <td>8630.0</td>\n      <td>Greater NOIDA</td>\n    </tr>\n  </tbody>\n</table>\n<p>50030 rows × 6 columns</p>\n</div>"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"daily_df_dummy=pd.get_dummies(daily_df,columns=['warehouse_name'],dtype='int')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:00:34.648567Z","iopub.execute_input":"2025-04-17T14:00:34.648798Z","iopub.status.idle":"2025-04-17T14:00:34.662607Z","shell.execute_reply.started":"2025-04-17T14:00:34.648781Z","shell.execute_reply":"2025-04-17T14:00:34.661908Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"daily_df_dummy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:00:34.663385Z","iopub.execute_input":"2025-04-17T14:00:34.663571Z","iopub.status.idle":"2025-04-17T14:00:34.676327Z","shell.execute_reply.started":"2025-04-17T14:00:34.663554Z","shell.execute_reply":"2025-04-17T14:00:34.675671Z"}},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"       customer_id order_date  daily_order_count  discount  net_order_amount  \\\n0                1 2024-10-01                  1      0.00            4710.0   \n1                1 2024-10-06                  1    120.00            2220.0   \n2                1 2024-10-07                  1    150.00           12900.0   \n3                1 2024-10-09                  1    200.00            3210.0   \n4                1 2024-10-10                  1    273.76            5580.0   \n...            ...        ...                ...       ...               ...   \n50025         9158 2025-04-03                  1    540.00            6300.0   \n50026         9158 2025-04-07                  1    530.00            6450.0   \n50027         9158 2025-04-08                  1    481.00            5890.0   \n50028         9158 2025-04-09                  1    721.00            8650.0   \n50029         9158 2025-04-10                  1    710.00            8630.0   \n\n       warehouse_name_Ayodhya  warehouse_name_Gomti Nagar  \\\n0                           0                           0   \n1                           0                           0   \n2                           0                           0   \n3                           0                           0   \n4                           0                           0   \n...                       ...                         ...   \n50025                       0                           0   \n50026                       0                           0   \n50027                       0                           0   \n50028                       0                           0   \n50029                       0                           0   \n\n       warehouse_name_Greater NOIDA  warehouse_name_Noida  \\\n0                                 0                     0   \n1                                 0                     0   \n2                                 0                     0   \n3                                 0                     0   \n4                                 0                     0   \n...                             ...                   ...   \n50025                             1                     0   \n50026                             1                     0   \n50027                             1                     0   \n50028                             1                     0   \n50029                             1                     0   \n\n       warehouse_name_Telibagh  warehouse_name_Unnao  \n0                            1                     0  \n1                            1                     0  \n2                            1                     0  \n3                            1                     0  \n4                            1                     0  \n...                        ...                   ...  \n50025                        0                     0  \n50026                        0                     0  \n50027                        0                     0  \n50028                        0                     0  \n50029                        0                     0  \n\n[50030 rows x 11 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>customer_id</th>\n      <th>order_date</th>\n      <th>daily_order_count</th>\n      <th>discount</th>\n      <th>net_order_amount</th>\n      <th>warehouse_name_Ayodhya</th>\n      <th>warehouse_name_Gomti Nagar</th>\n      <th>warehouse_name_Greater NOIDA</th>\n      <th>warehouse_name_Noida</th>\n      <th>warehouse_name_Telibagh</th>\n      <th>warehouse_name_Unnao</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2024-10-01</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>4710.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2024-10-06</td>\n      <td>1</td>\n      <td>120.00</td>\n      <td>2220.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>2024-10-07</td>\n      <td>1</td>\n      <td>150.00</td>\n      <td>12900.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>2024-10-09</td>\n      <td>1</td>\n      <td>200.00</td>\n      <td>3210.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>2024-10-10</td>\n      <td>1</td>\n      <td>273.76</td>\n      <td>5580.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>50025</th>\n      <td>9158</td>\n      <td>2025-04-03</td>\n      <td>1</td>\n      <td>540.00</td>\n      <td>6300.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>50026</th>\n      <td>9158</td>\n      <td>2025-04-07</td>\n      <td>1</td>\n      <td>530.00</td>\n      <td>6450.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>50027</th>\n      <td>9158</td>\n      <td>2025-04-08</td>\n      <td>1</td>\n      <td>481.00</td>\n      <td>5890.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>50028</th>\n      <td>9158</td>\n      <td>2025-04-09</td>\n      <td>1</td>\n      <td>721.00</td>\n      <td>8650.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>50029</th>\n      <td>9158</td>\n      <td>2025-04-10</td>\n      <td>1</td>\n      <td>710.00</td>\n      <td>8630.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>50030 rows × 11 columns</p>\n</div>"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"SEQ_LEN = 30\nPRED_HORIZON = 14","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:01:09.954993Z","iopub.execute_input":"2025-04-17T14:01:09.955520Z","iopub.status.idle":"2025-04-17T14:01:09.958876Z","shell.execute_reply.started":"2025-04-17T14:01:09.955498Z","shell.execute_reply":"2025-04-17T14:01:09.958145Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"df = daily_df_dummy.copy()\ndf['order_date'] = pd.to_datetime(df['order_date'])\n\n# Identify feature columns (everything except customer_id and date)\nfeature_cols = [c for c in df.columns \n                if c not in ('customer_id','order_date')]\n\n# Container for sequences\nX, y = [], []\n\n# Process each customer individually\nfor cust_id, group in tqdm(df.groupby('customer_id'), total=df['customer_id'].nunique()):\n    # 1) build a full daily index for this customer\n    group = group.set_index('order_date').sort_index()\n    full_idx = pd.date_range(group.index.min(), group.index.max(), freq='D')\n    group = group.reindex(full_idx).fillna(0)\n    \n    # keep customer_id and date for indexing\n    group['customer_id'] = cust_id\n    group['date']        = group.index\n    \n    # 2) extract feature matrix and target vector\n    data = group[feature_cols].values\n    targets = (group['daily_order_count'] > 0).astype(int).values  # 0/1 each day\n    \n    # 3) sliding windows\n    n = len(group)\n    for start in range(n - SEQ_LEN - PRED_HORIZON + 1):\n        end   = start + SEQ_LEN\n        fend  = end + PRED_HORIZON\n        \n        X.append(data[start:end, :])         # shape (30, num_features)\n        y.append(targets[end:fend])          # shape (14,)\n        \n# 4) convert to numpy arrays\nX = np.stack(X)   # (num_samples, 30, num_features)\ny = np.stack(y)   # (num_samples, 14)\n\nprint(\"X shape:\", X.shape)\nprint(\"y shape:\", y.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:01:12.937053Z","iopub.execute_input":"2025-04-17T14:01:12.937758Z","iopub.status.idle":"2025-04-17T14:01:17.491456Z","shell.execute_reply.started":"2025-04-17T14:01:12.937733Z","shell.execute_reply":"2025-04-17T14:01:17.490643Z"}},"outputs":[{"name":"stderr","text":"100%|██████████| 1932/1932 [00:04<00:00, 476.22it/s]\n","output_type":"stream"},{"name":"stdout","text":"X shape: (180411, 30, 9)\ny shape: (180411, 14)\n","output_type":"stream"}],"execution_count":31},{"cell_type":"code","source":"X_train,X_test,Y_train,Y_test=train_test_split(X,y,test_size=0.4,random_state=42)\nX_cv,X_test,Y_cv,Y_test=train_test_split(X_test,Y_test,test_size=0.5,random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:01:17.492799Z","iopub.execute_input":"2025-04-17T14:01:17.493234Z","iopub.status.idle":"2025-04-17T14:01:17.716417Z","shell.execute_reply.started":"2025-04-17T14:01:17.493214Z","shell.execute_reply":"2025-04-17T14:01:17.715624Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"from tensorflow.keras.optimizers import Adam","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:15:09.608948Z","iopub.execute_input":"2025-04-17T14:15:09.609389Z","iopub.status.idle":"2025-04-17T14:15:09.612548Z","shell.execute_reply.started":"2025-04-17T14:15:09.609367Z","shell.execute_reply":"2025-04-17T14:15:09.611885Z"}},"outputs":[],"execution_count":58},{"cell_type":"code","source":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout\n\n# Assuming you have already defined:\n# SEQ_LEN = 30\n# PRED_HORIZON = 14\n# feature_cols = [...]  # list of your input column names\n\nNUM_FEATURES = len(feature_cols)\n\nmodel = Sequential([\n    # 1st LSTM layer, returns sequences so we can stack another LSTM\n    LSTM(64, input_shape=(SEQ_LEN, NUM_FEATURES), return_sequences=True),\n    Dropout(0.2),\n\n    # 2nd LSTM layer\n    LSTM(32, return_sequences=False),\n    Dropout(0.2),\n\n    # Dense “bottleneck” to learn combined features\n    Dense(32, activation='relu'),\n    Dropout(0.1),\n\n    # Final output: 14 sigmoid neurons, one per future day\n    Dense(PRED_HORIZON, activation='sigmoid')\n])\n\nmodel.compile(\n    optimizer=Adam(learning_rate=0.001),\n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)\n\nmodel.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:28:00.248057Z","iopub.execute_input":"2025-04-17T14:28:00.248628Z","iopub.status.idle":"2025-04-17T14:28:00.321389Z","shell.execute_reply.started":"2025-04-17T14:28:00.248603Z","shell.execute_reply":"2025-04-17T14:28:00.320657Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_4\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_4\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ lstm_8 (\u001b[38;5;33mLSTM\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m64\u001b[0m)              │          \u001b[38;5;34m18,944\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_12 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m64\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ lstm_9 (\u001b[38;5;33mLSTM\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │          \u001b[38;5;34m12,416\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_13 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_8 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │           \u001b[38;5;34m1,056\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_14 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_9 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m)                  │             \u001b[38;5;34m462\u001b[0m │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ lstm_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)              │          <span style=\"color: #00af00; text-decoration-color: #00af00\">18,944</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ lstm_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">12,416</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_13 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">1,056</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_14 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>)                  │             <span style=\"color: #00af00; text-decoration-color: #00af00\">462</span> │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m32,878\u001b[0m (128.43 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">32,878</span> (128.43 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m32,878\u001b[0m (128.43 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">32,878</span> (128.43 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":64},{"cell_type":"code","source":"history = model.fit(\n    X_train, Y_train,\n    epochs=50,\n    batch_size=64,\n    validation_data=(X_cv, Y_cv),\n    callbacks=[]  # You can add ModelCheckpoint or EarlyStopping if needed\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T14:28:03.031618Z","iopub.execute_input":"2025-04-17T14:28:03.031882Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/50\n\u001b[1m1692/1692\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 8ms/step - accuracy: 0.0747 - loss: 0.4603 - val_accuracy: 0.0407 - val_loss: 0.4341\nEpoch 2/50\n\u001b[1m1692/1692\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 7ms/step - accuracy: 0.0889 - loss: 0.4368 - val_accuracy: 0.0704 - val_loss: 0.4338\nEpoch 3/50\n\u001b[1m1692/1692\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 7ms/step - accuracy: 0.1039 - loss: 0.4378 - val_accuracy: 0.1175 - val_loss: 0.4336\nEpoch 4/50\n\u001b[1m1692/1692\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 7ms/step - accuracy: 0.1141 - loss: 0.4361 - val_accuracy: 0.1265 - val_loss: 0.4338\nEpoch 5/50\n\u001b[1m1692/1692\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 7ms/step - accuracy: 0.1338 - loss: 0.4353 - val_accuracy: 0.0773 - val_loss: 0.4333\nEpoch 6/50\n\u001b[1m1692/1692\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 8ms/step - accuracy: 0.1263 - loss: 0.4356 - val_accuracy: 0.1109 - val_loss: 0.4337\nEpoch 7/50\n\u001b[1m1692/1692\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 7ms/step - accuracy: 0.1352 - loss: 0.4359 - val_accuracy: 0.1586 - val_loss: 0.4333\nEpoch 8/50\n\u001b[1m1692/1692\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 8ms/step - accuracy: 0.1467 - loss: 0.4354 - val_accuracy: 0.0983 - val_loss: 0.4332\nEpoch 9/50\n\u001b[1m1692/1692\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 7ms/step - accuracy: 0.1400 - loss: 0.4353 - val_accuracy: 0.1478 - val_loss: 0.4336\nEpoch 10/50\n\u001b[1m1692/1692\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 7ms/step - accuracy: 0.1456 - loss: 0.4349 - val_accuracy: 0.1777 - val_loss: 0.4339\nEpoch 11/50\n\u001b[1m 253/1692\u001b[0m \u001b[32m━━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m10s\u001b[0m 7ms/step - accuracy: 0.1835 - loss: 0.4340","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"plt.plot(history.history['val_accuracy'])","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pred_val=model.predict(X_cv)\npred_val_bin= (pred_val > 0.5).astype(int)\nprint(\"Validation Data:\")\n\nprint(\"Accuracy is \",accuracy_score(Y_cv,pred_val_bin))\nprint(\"Precision is \",precision_score(Y_cv,pred_val_bin,average='macro'))\nprint(\"Recall is \",recall_score(Y_cv,pred_val_bin,average='macro'))\nprint(\"F1 Score is \",f1_score(Y_cv,pred_val_bin,average='macro'))\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}